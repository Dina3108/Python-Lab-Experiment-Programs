# -*- coding: utf-8 -*-
"""Experiment_6_List_and_Tuple .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qLHY-f2k2EAwwtyyL2FGpo7WLbbVk3Eo

Write a program to create a list and perform the following operations: append, insert, delete, and
update an element.
"""

def list_ops():
    lst = []
    lst.append(5)
    lst.insert(1, 10)
    lst.append(15)
    lst.remove(10)
    lst[0] = 20
    print(f"Updated List: {lst}")

list_ops()

"""Write a program to create a list of integers and print the largest, smallest, and average of the list
elements.
"""



def list_stats():
    lst = list(map(int, input("Enter a list of integers separated by space: ").split()))
    largest = max(lst)
    smallest = min(lst)
    average = sum(lst) / len(lst)
    print(f"Largest: {largest}, Smallest: {smallest}, Average: {average}")

list_stats()

"""Write a program to generate a list of squares of the first 10 natural numbers using list
comprehension.
"""

def list_squares():
    squares = [x**2 for x in range(1, 11)]
    print(squares)

list_squares()

"""Write a program to create a list of student names and sort them in ascending and descending
order.
"""

def sort_names():
    names = input("Enter student names separated by space: ").split()
    names.sort()
    print(f"Names in ascending order: {names}")
    names.sort(reverse=True)
    print(f"Names in descending order: {names}")

sort_names()

"""Write a program to perform linear search and binary search on a list of numbers"""

def search_ops():
    lst = list(map(int, input("Enter nums (space separated list): ").split()))
    x = int(input("Enter target : "))

    def lin_srch(l, t):
        for i in range(len(l)):
            if l[i] == t:
                return i
        return -1

    def bin_srch(l, t):
        temp = sorted((val, idx) for idx, val in enumerate(l))
        low, high = 0, len(temp) - 1
        while low <= high:
            mid = (low + high) // 2
            if temp[mid][0] == t:
                return temp[mid][1]
            elif temp[mid][0] < t:
                low = mid + 1
            else:
                high = mid - 1
        return -1

    lin_res = lin_srch(lst, x)
    bin_res = bin_srch(lst, x)

    print(f"Linear: {lin_res if lin_res != -1 else 'Not Found'}")
    print(f"Binary: {bin_res if bin_res != -1 else 'Not Found'}")

search_ops()

"""Given a list of numbers, create a new list containing the squares of only the odd numbers from
the original list. (Use List comprehension)  
"""

def odd_squares():
    lst = list(map(int, input("Enter a list of numbers separated by space: ").split()))
    odd_squares = [x**2 for x in lst if x % 2 != 0]
    print(f"Squares of odd numbers: {odd_squares}")

odd_squares()

"""Write a program to swap two values using tuple unpacking."""

def swap_values():
    a, b = map(int, input("Enter two values to swap (separated by space): ").split())
    a, b = b, a
    print(f"After swapping: a = {a}, b = {b}")

swap_values()

"""Write a program to create a list of tuples containing student names and their marks, and print the
names of students who scored more than 90.
"""

def student_marks():
    n = int(input("Enter the number of students: "))
    students = []

    for i in range(n):
        name = input(f"Enter the name of student {i+1}: ")
        marks = int(input(f"Enter the marks of {name}: "))
        students.append((name, marks))

    print("\nStudents who scored more than 90:")
    for student in students:
        if student[1] > 90:
            print(student[0])

student_marks()

"""A sensor returns a list of readings. Negative readings are invalid and should be replaced by zero
and Use list comprehension to replace all negative numbers in a list with 0.
"""

def replace_negatives():
    n = int(input("Enter the number of readings: "))
    readings = []

    for i in range(n):
        reading = int(input(f"Enter reading {i+1}: "))
        readings.append(reading)

    updated_readings = [0 if x < 0 else x for x in readings]
    print(f"Updated readings (negative replaced by 0): {updated_readings}")

replace_negatives()

"""Create a system to process customer orders. Each order can contain multiple items (represented
as strings). The system should allow adding items to an order, removing items, displaying the
current order, and calculating the total number of items in the order. You could extend this by
associating quantities with each item (e.g., a list of tuples: [("Laptop", 1), ("Mouse", 2)]).
"""

def customer_order():
    order = []
    while True:
        item = input("Enter item to add (or 'done' to finish): ")
        if item == 'done':
            break
        order.append(item)

    print(f"Current Order: {order}")
    print(f"Total Items: {len(order)}")

customer_order()

"""Given a list of numbers and a target sum, find all unique pairs of numbers in the list that add up
to the target sum.
"""

def find_pairs():
    nums = list(map(int, input("Enter numbers separated by space: ").split()))
    target = int(input("Enter target sum: "))
    pairs = []

    for i in range(len(nums)):
        for j in range(i+1, len(nums)):
            if nums[i] + nums[j] == target:
                pairs.append((nums[i], nums[j]))

    print(f"Pairs: {pairs}")

find_pairs()

"""Implement a function that performs Run-Length Encoding on a list of characters. RLE
compresses data by replacing consecutive identical characters with the character and its count.
For example, ["a", "a", "a", "b", "b", "c"] would be encoded as [("a", 3), ("b", 2), ("c", 1)].  
"""

def run_length_encoding(char_list):
    encoding = []
    count = 1
    for i in range(1, len(char_list)):
        if char_list[i] == char_list[i - 1]:
            count += 1
        else:
            encoding.append((char_list[i - 1], count))
            count = 1
    encoding.append((char_list[-1], count))
    return encoding

user_input = input("Enter a list of characters (e.g., 'a a a b b c'): ")
char_list = user_input.split()
encoded_list = run_length_encoding(char_list)
print(f"Encoded list: {encoded_list}")

"""Scenario:
Given a matrix and need to transpose it and  Use nested list comprehension to transpose a
matrix.
Input:
matrix = [
[1, 2, 3],
[4, 5, 6]  
]
Output:
[
[1, 4],
[2, 5],
[3, 6]
]
"""

def transpose_matrix():
    rows = int(input("Enter the number of rows in the matrix: "))
    cols = int(input("Enter the number of columns in the matrix: "))

    matrix = []
    for i in range(rows):
        row = list(map(int, input(f"Enter row {i+1} (space-separated values): ").split()))
        matrix.append(row)

    transposed_matrix = [[matrix[j][i] for j in range(rows)] for i in range(cols)]

    print("Transposed Matrix:")
    for row in transposed_matrix:
        print(row)

transpose_matrix()

"""Given a list of strings, extract digits from each string and store them in a new list.
Input: ["abc123", "hello99"] â†’ Output: ["123", "99"]
"""

def extract_digits():
    strings = input("Enter a list of strings (comma-separated): ").split(",")
    digit_list = []

    for string in strings:
        digits = ''.join([char for char in string if char.isdigit()])
        digit_list.append(digits)

    print("Extracted Digits:", digit_list)

extract_digits()